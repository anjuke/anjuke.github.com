---
layout: post
title: "A Workaround for Flask Werkzeug's Incompatibility With Buildout"
date: 2012-09-08 21:13
author: jizhang
comments: true
categories: [python]
---

{%img right http://www.gravatar.com/avatar/b881be65f3c4f45dd68bcf0fbe6ba82b.png %}

Normally, we can use the following snippet to run a flask application:

$ cat index.py
```python
from flask import Flask

app = Flask(__name__)
app.config.from_object('myproject.default_settings')

@app.route('/')
def index():
    return 'Hello, world!'

if __name__ == '__main__':
    app.run()
```
$ python index.py

But when it comes to buildout, things go wrong:

$ cat buildout.cfg
```
[buildout]
parts = myproject
develop = .

[myproject]
recipe = zc.recipe.egg
interpreter = python
eggs =
    myproject
```
$ cat src/myproject/__init__.py
```python
from flask import Flask

app = Flask(__name__)
app.config.from_object('myproject.default_settings')

@app.route('/')
def index():
    return 'Hello, world!'
```
$ cat index.py
```python
from myproject import app

if __name__ == '__main__':
    app.run()
```
$ bin/python index.py
<pre>
 * Running on http://127.0.0.1:5000/
 * Restarting with reloader
Traceback (most recent call last):
  File "index.py", line 1, in <module>
    from myproject import app
ImportError: No module named myproject
</pre>

The problem is triggered by "app.config.from_object...". When running this line (or a file is changed during development), Werkzeug will restart the application using the default python interpreter, not the one generated by buildout (i.e. bin/python), because bin/python removed itself from the sys.argv list while Werkzeug uses this to do reloading, which at last results in an ImportError. 

The solution is to generate a custom script to run the server. zc.recipe.egg:scripts recipe is ready for use. We specify an 'entry-points' option, like the following:
(actually scripts is the default recipe of zc.recipe.egg, so you can simply omit it)

```
[buildout]
parts = myproject
develop = .

[myproject]
recipe = zc.recipe.egg
interpreter = python
entry-points = serve=myproject:main
eggs =
    myproject
```

And we need to add a main function to the package's __init__.py:

```python
def main():
    app.run()
```

Execute bin/buildout again, and a script named serve will be generated in bin directory. Run it away:

$ bin/serve
<pre>
 * Running on http://127.0.0.1:5000/
 * Restarting with reloader
</pre>

It'll work. Also the index.py is no longer necessary.

You can totally customize the script, like:
<pre>
entry-points = script_name=project_name.module_name:function_name
</pre>

For more information on zc.recipe.egg:scripts, visit:

[http://pypi.python.org/pypi/zc.recipe.egg/1.3.2#specifying-entry-points](http://pypi.python.org/pypi/zc.recipe.egg/1.3.2#specifying-entry-points)

The original question can be found in the mailing list:

[http://flask.pocoo.org/mailinglist/archive/2011/7/18/flask-with-buildout/](http://flask.pocoo.org/mailinglist/archive/2011/7/18/flask-with-buildout/)
